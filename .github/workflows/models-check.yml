name: Check Models

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'models/**'

jobs:
  detect-breaking-changes:
    runs-on: ubuntu-latest
    outputs:
      breaking_changes_found: ${{ steps.detect.outputs.breaking_changes_found }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch main branch
        run: git fetch origin main
    
      - name: Check for deleted models and fail if any are found
        run: |
          echo "Checking for deleted models..."
          deleted_models=$(git diff --name-status origin/main -- models | grep '^D' || true)
    
          if [ -z "$deleted_models" ]; then
            deleted_count=0
          else
            deleted_count=$(echo "$deleted_models" | wc -l)
          fi

          if [ "$deleted_count" -gt 0 ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were deleted:"
            echo "$deleted_models" | while read -r status file; do
              echo "- $(basename "$file" .cs)"
            done
            exit 1
          else
            echo "No models were deleted."
          fi

      - name: Check for renamed models and fail if any are found
        run: |
          echo "Checking for renamed models..."
          renamed_models=$(git diff --name-status origin/main -- models | grep '^R' || true)
    
          if [ -z "$renamed_models" ]; then
            renamed_count=0
          else
            renamed_count=$(echo "$renamed_models" | wc -l)
          fi

          while read -r status oldfile newfile; do
            if [[ "$status" == R* ]]; then
              oldname=$(basename "$oldfile" .cs)
              newname=$(basename "$newfile" .cs)

              if [ "$oldname" != "$newname" ]; then
                if [ -z "$renamed" ]; then
                  renamed="- $oldname ‚Üí $newname"
                else
                  renamed="$renamed\n- $oldname ‚Üí $newname"
                fi
              else
                if [ -z "$moved_only" ]; then
                  moved_only="- $oldname"
                else
                  moved_only="$moved_only\n- $oldname"
                fi
              fi
            fi
          done <<< "$renamed_models"

          if [ -n "$moved_only" ]; then
            echo "WARNING: The following models were moved but not renamed:"
            echo -e "$moved_only"
          fi

          if [ -n "$renamed" ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were renamed:"
            echo -e "$renamed"
            exit 1
          else
            echo "No models were renamed."
          fi
        
      - name: Check for modified models and check the added properties. Fail if not nullable or have default value
        run: |
          modified_models=$(git diff --name-only --diff-filter=M origin/main -- models | grep -E '\.cs$' || true)
          all_errors=""
          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              added_properties=$(git diff origin/main -- "$model" \
                | grep '^\+' \
                | grep -v '^\+\s*//' \
                | grep -v '^\+\s*$' \
                | grep -E 'public\s+[^;{]+{[^}]*}' \
                | grep -vE '\?\s*\w*\s*{|=\s*[^;]+;' || true)
              if [ -n "$added_properties" ]; then
                all_errors+="\nIn $model:\n$added_properties\n"
              fi
            done

            if [ -n "$all_errors" ]; then
              echo -e "BREAKING CHANGE: The following properties were added without being nullable or having a default value:"
              echo -e "$all_errors"
              exit 1
            else
              echo "No added properties without nullable/default value found."
            fi
          else
            echo "No modified models found."
          fi

      - name: Detect potential breaking changes in modified models with modified properties
        id: detect
        run: |
          echo "Checking for deleted or modified properties in the models..."
          modified_models=$(git diff --name-only origin/main -- models | grep -E '\.cs$' || true)

          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              lines_removed_or_modified=$(git diff origin/main -- "$model" | grep '^-' | grep -v '^---' | grep -v '^-\s*//'| grep -v '^\s*$' | wc -l)
              if [ "$lines_removed_or_modified" -gt 0 ]; then
                model_name=$(basename "$model" .cs)
                modified_list+=("$model_name")
              fi
            done
          fi

          if [ ${#modified_list[@]} -gt 0 ]; then
            echo "BREAKING CHANGE: The following models have modified or deleted properties:"
            for model in "${modified_list[@]}"; do
              echo "- $model"
            done
            breaking_changes_found=true
          else
            echo "No models have modified or deleted properties."
          fi

          # Set output with new syntax (recommended)
          echo "breaking_changes_found=$breaking_changes_found" >> $GITHUB_OUTPUT
  
  no-breaking-changes-found:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: needs.detect-breaking-changes.outputs.breaking_changes_found == 'false'
    steps:
      - name: No breaking changes found
        run: echo "No breaking changes found or approval granted, workflow continues."
  
  no-approval-needed-for-manual:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'true' }}
    steps:
      - name: Fail immediately on breaking changes when manually triggered
        run: |
          echo "Breaking changes detected. Manual approval is skipped on workflow_dispatch trigger."
          exit 1

  potential-breaking-changes-found-bypass-approval:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'true' }}
    environment:
      name: dev
    steps:
      - name: Breaking changes found in the models. Please review the changes before continuing.
        run: echo "Manual approval received, continuing workflow."

  potential-breaking-changes-found-approved:
    needs: potential-breaking-changes-found-bypass-approval
    runs-on: ubuntu-latest
    if: needs.potential-breaking-changes-found-bypass-approval.result == 'success'
    steps:
      - name: Breaking changes found and approved
        run: echo "Breaking changes found and approved, workflow continues."

  generate-changelog:
    needs: [no-breaking-changes-found, potential-breaking-changes-found-approved]
    runs-on: ubuntu-latest
    if: ${{ 
          (
            needs.no-breaking-changes-found.result == 'success' && needs.potential-breaking-changes-found-approved.result == 'skipped'
          ) || (
            needs.potential-breaking-changes-found-approved.result == 'success' && needs.no-breaking-changes-found.result == 'skipped'
          )
        }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog document
        run: |
          echo "## Model Changes Changelog" > changelog.md
          echo "" >> changelog.md
          echo "Changes between origin/main and HEAD:" >> changelog.md
          git diff --stat origin/main -- models >> changelog.md
          echo "" >> changelog.md
          echo "Detailed changes:" >> changelog.md
          git diff origin/main -- models >> changelog.md

      - name: Post changelog as PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'changelog.md';

            if (fs.existsSync(path)) {
              const changelog = fs.readFileSync(path, 'utf8');
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `### üìù Models Changelog\n\n${changelog}`
              });
            } else {
              core.warning('changelog.md not found, skipping PR comment.');
            }
