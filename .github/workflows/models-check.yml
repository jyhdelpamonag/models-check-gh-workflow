name: Check Models

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'models/**'

permissions:
  contents: write
  pull-requests: write


jobs:
  detect-breaking-changes:
    runs-on: ubuntu-latest
    outputs:
      breaking_changes_found: ${{ steps.detect.outputs.breaking_changes_found }}
      added_models: ${{ steps.gather.outputs.added_models }}
      added_properties_list: ${{ steps.gather.outputs.added_properties_list }}
      breaking_changes_list: ${{ steps.detect.outputs.breaking_changes_list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch main branch
        run: git fetch origin main

    
      - name: Check for deleted models and fail if any are found
        run: |
          echo "Checking for deleted models..."
          deleted_models=$(git diff --name-status origin/main -- models | grep '^D' || true)
    
          if [ -z "$deleted_models" ]; then
            deleted_count=0
          else
            deleted_count=$(echo "$deleted_models" | wc -l)
          fi

          if [ "$deleted_count" -gt 0 ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were deleted:"
            echo "$deleted_models" | while read -r status file; do
              echo "- $(basename "$file" .cs)"
            done
            exit 1
          else
            echo "No models were deleted."
          fi

      - name: Check for renamed models and fail if any are found
        run: |
          echo "Checking for renamed models..."
          renamed_models=$(git diff --name-status origin/main -- models | grep '^R' || true)
    
          if [ -z "$renamed_models" ]; then
            renamed_count=0
          else
            renamed_count=$(echo "$renamed_models" | wc -l)
          fi

          while read -r status oldfile newfile; do
            if [[ "$status" == R* ]]; then
              oldname=$(basename "$oldfile" .cs)
              newname=$(basename "$newfile" .cs)

              if [ "$oldname" != "$newname" ]; then
                if [ -z "$renamed" ]; then
                  renamed="- $oldname → $newname"
                else
                  renamed="$renamed\n- $oldname → $newname"
                fi
              else
                if [ -z "$moved_only" ]; then
                  moved_only="- $oldname"
                else
                  moved_only="$moved_only\n- $oldname"
                fi
              fi
            fi
          done <<< "$renamed_models"

          if [ -n "$moved_only" ]; then
            echo "WARNING: The following models were moved but not renamed:"
            echo -e "$moved_only"
          fi

          if [ -n "$renamed" ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were renamed:"
            echo -e "$renamed"
            exit 1
          else
            echo "No models were renamed."
          fi
        
      - name: Check for modified models and check the added properties. Fail if not nullable or have default value
        run: |
          modified_models=$(git diff --name-only --diff-filter=M origin/main -- models | grep -E '\.cs$' || true)
          all_errors=""
          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              added_properties=$(git diff origin/main -- "$model" \
                | grep '^\+' \
                | grep -v '^\+\s*//' \
                | grep -v '^\+\s*$' \
                | grep -E 'public\s+[^;{]+{[^}]*}' \
                | grep -vE '\?\s*\w*\s*{|=\s*[^;]+;' || true)
              if [ -n "$added_properties" ]; then
                all_errors+="\nIn $model:\n$added_properties\n"
              fi
            done

            if [ -n "$all_errors" ]; then
              echo -e "BREAKING CHANGE: The following properties were added without being nullable or having a default value:"
              echo -e "$all_errors"
              exit 1
            else
              echo "No added properties without nullable/default value found."
            fi
          else
            echo "No modified models found."
          fi

      - name: Detect potential breaking changes in modified models with modified properties
        id: detect
        run: |
          echo "Checking for deleted or modified properties in the models..."
          modified_models=$(git diff --name-only origin/main -- models | grep -E '\.cs$' || true)

          declare -A breaking_changes
          breaking_changes_found=false

          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              prop_lines=$(git diff origin/main -- "$model" | grep '^-' | grep -v '^---' | grep -v '^-\s*//' | grep -v '^\s*$' | grep -E '^\s*-\s*public .* { get; set; }' || true)

              if [ -n "$prop_lines" ]; then
                model_name=$(basename "$model")
                # Extract property names from those lines
                props=()
                while IFS= read -r line; do
                  # line looks like: "-    public string PropertyName { get; set; }"
                  # Extract the property name using regex
                  # Remove leading "- ", then capture the word after "public <type>"
                  prop_name=$(echo "$line" | sed -E 's/^- *public [^ ]+ ([^ ]+) .*$/\1/')
                  props+=("$prop_name")
                done <<< "$prop_lines"

                # Save in associative array: join props by comma or newline
                breaking_changes["$model_name"]="${props[*]}"
                breaking_changes_found=true
              fi
            done
          fi

          if [ "$breaking_changes_found" = true ]; then
            echo "BREAKING CHANGE: The following models have modified or deleted properties:"
            for model in "${!breaking_changes[@]}"; do
              echo "$model:"
              for prop in ${breaking_changes[$model]}; do
                echo "  - $prop"
              done
            done
          else
            echo "No models have modified or deleted properties."
          fi

          breaking_list=""
          for model in "${!breaking_changes[@]}"; do
            props_csv=$(echo "${breaking_changes[$model]}" | tr ' ' ',')
            breaking_list+="${model}:${props_csv};"
          done

          echo "breaking_changes_found=$breaking_changes_found" >> $GITHUB_OUTPUT
          echo "breaking_changes_list=$breaking_list" >> $GITHUB_OUTPUT

  
      - name: Gather all added models and added properties on modified models and save it on a list
        id: gather
        run: |
          echo "Gathering added models and properties..."

          # Get added and modified model files
          added_models=$(git diff --name-only --diff-filter=A origin/main -- models | grep -E '\.cs$' || true)
          modified_models=$(git diff --name-only --diff-filter=M origin/main -- models | grep -E '\.cs$' || true)

          echo "Added models:"
          if [ -n "$added_models" ]; then
            echo "$added_models"
          else
            echo "No new models added."
          fi

          echo "Modified models:"
          if [ -n "$modified_models" ]; then
            echo "$modified_models"
          else
            echo "No modified models found."
          fi

          declare -A added_props_map

          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              # Grab added lines only (+) but exclude diff metadata (+++), and filter lines that look like public auto-properties
              added_props=$(git diff origin/main -- "$model" \
                | grep '^+' \
                | grep -v '^\+\+\+' \
                | grep -E '^\+\s*public\s+[^ ]+(\??)\s+[^ ]+\s*{ get; set; }' || true)

              if [ -n "$added_props" ]; then
                props=()
                while IFS= read -r line; do
                  # Extract property name: match after type and optional nullable ? until space before { get; set; }
                  prop_name=$(echo "$line" | sed -E 's/^\+\s*public\s+[^ ]+\??\s+([^ ]+)\s*{ get; set; }.*/\1/')
                  props+=("$prop_name")
                done <<< "$added_props"

                added_props_map["$model"]="${props[*]}"
              fi
            done
          fi

          if [ ${#added_props_map[@]} -gt 0 ]; then
            echo "Added properties by model:"
            for model in "${!added_props_map[@]}"; do
              echo "$model:"
              for prop in ${added_props_map[$model]}; do
                echo "  - $prop"
              done
            done
          else
            echo "No added properties found inside modified models."
          fi

          # Export outputs
          echo "added_models=$added_models" >> $GITHUB_OUTPUT

          # Removed the incorrect output line here
          # echo "added_properties=$modified_models" >> $GITHUB_OUTPUT

          added_props_list=""
          for model in "${!added_props_map[@]}"; do
            props_csv=$(echo "${added_props_map[$model]}" | tr ' ' ',')
            added_props_list+="${model}:${props_csv};"
          done

          echo "DEBUG: added_props_list=$added_props_list"
          echo "added_properties_list=$added_props_list" >> $GITHUB_OUTPUT


  potential-breaking-changes-found-bypass-approval:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'true' }}
    environment:
      name: dev
    steps:
      - name: Breaking changes found in the models. Please review the changes before continuing.
        run: echo "Manual approval received, continuing workflow."

  generate-changelog-no-breaking-changes:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog document with added model properties
        env:
          ADDED_MODELS: ${{ needs.detect-breaking-changes.outputs.added_models }}
          ADDED_PROPERTIES_LIST: ${{ needs.detect-breaking-changes.outputs.added_properties_list }}
        run: |
          added_models_count=$(echo "$ADDED_MODELS" | grep -cve '^\s*$' || echo 0)
          modified_models_count=0
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            modified_models_count=$(echo "$ADDED_PROPERTIES_LIST" | awk -F';' '{print NF-1}')
          fi

          echo "## Model Changes Changelog (No Breaking Changes)" > changelog.md
          echo "" >> changelog.md

          echo "### Summary" >> changelog.md
          echo "- Models Added: $added_models_count" >> changelog.md
          echo "- Models Modified (Added Properties): $modified_models_count" >> changelog.md
          echo "" >> changelog.md

          echo "### ➕ Added Models with Properties:" >> changelog.md
          if [ -n "$ADDED_MODELS" ]; then
            while read -r model_path; do
              model_name=$(basename "$model_path" .cs)
              echo "- $model_name" >> changelog.md

              props=$(grep -E 'public\s+[^;{]+{[^}]*}' "$model_path" | sed -E 's/.*public[[:space:]]+[^ ]+[[:space:]]+([^ ]+)[[:space:]]*\{.*/  - \1/')
              if [ -n "$props" ]; then
                echo "$props" >> changelog.md
              else
                echo "  - (No properties found)" >> changelog.md
              fi
            done <<< "$ADDED_MODELS"
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ➕ Added Properties in Modified Models:" >> changelog.md
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            IFS=';' read -ra models <<< "$ADDED_PROPERTIES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              echo "- $model" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### 🧑 Changed By:" >> changelog.md
          echo "- ${{ github.actor }}" >> changelog.md

      - name: Post changelog as PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'changelog.md';

            if (fs.existsSync(path)) {
              const changelog = fs.readFileSync(path, 'utf8');
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `### 📝 Models Changelog\n\n${changelog}`
              });
            } else {
              core.warning('changelog.md not found, skipping PR comment.');
            }


  generate-changelog-with-potential-breaking-changes:
    needs: [detect-breaking-changes, potential-breaking-changes-found-bypass-approval]
    runs-on: ubuntu-latest
    if: ${{ needs.potential-breaking-changes-found-bypass-approval.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog document with breaking change details and added model properties
        env:
          BREAKING_CHANGES_LIST: ${{ needs.detect-breaking-changes.outputs.breaking_changes_list }}
          ADDED_MODELS: ${{ needs.detect-breaking-changes.outputs.added_models }}
          ADDED_PROPERTIES_LIST: ${{ needs.detect-breaking-changes.outputs.added_properties_list }}
        run: |
          added_models_count=$(echo "$ADDED_MODELS" | grep -cve '^\s*$' || echo 0)
          modified_models_count=0
          breaking_models_count=0

          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            modified_models_count=$(echo "$ADDED_PROPERTIES_LIST" | awk -F';' '{print NF-1}')
          fi

          if [ -n "$BREAKING_CHANGES_LIST" ]; then
            breaking_models_count=$(echo "$BREAKING_CHANGES_LIST" | awk -F';' '{print NF-1}')
          fi

          echo "## Model Changes Changelog (Breaking Changes Approved)" > changelog.md
          echo "" >> changelog.md

          echo "### Summary" >> changelog.md
          echo "- Models Added: $added_models_count" >> changelog.md
          echo "- Models Modified (Added Properties): $modified_models_count" >> changelog.md
          echo "- Models with Breaking Changes: $breaking_models_count" >> changelog.md
          echo "" >> changelog.md

          echo "### ➕ Added Models with Properties:" >> changelog.md
          if [ -n "$ADDED_MODELS" ]; then
            while read -r model_path; do
              model_name=$(basename "$model_path" .cs)
              echo "- $model_name" >> changelog.md

              props=$(grep -E 'public\s+[^;{]+{[^}]*}' "$model_path" | sed -E 's/.*public[[:space:]]+[^ ]+[[:space:]]+([^ ]+)[[:space:]]*\{.*/  - \1/')
              if [ -n "$props" ]; then
                echo "$props" >> changelog.md
              else
                echo "  - (No properties found)" >> changelog.md
              fi
            done <<< "$ADDED_MODELS"
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ➕ Added Properties in Modified Models:" >> changelog.md
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            IFS=';' read -ra models <<< "$ADDED_PROPERTIES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              echo "- $model" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ⚠️ Breaking Changes Detected:" >> changelog.md
          if [ -n "$BREAKING_CHANGES_LIST" ]; then
            IFS=';' read -ra models <<< "$BREAKING_CHANGES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              model_name=$(basename "$model" .cs)
              echo "- $model_name" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None detected." >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ✅ Approved By:" >> changelog.md
          echo "- ${{ github.actor }}" >> changelog.md

      - name: Post changelog as PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'changelog.md';

            if (fs.existsSync(path)) {
              const changelog = fs.readFileSync(path, 'utf8');
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `### 📝 Models Changelog\n\n${changelog}`
              });
            } else {
              core.warning('changelog.md not found, skipping PR comment.');
            }
