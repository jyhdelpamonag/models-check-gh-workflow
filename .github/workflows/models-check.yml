name: Check Models

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'models/**'

permissions:
  contents: write
  pull-requests: write


jobs:
  gate-latest-push:
    runs-on: ubuntu-latest
    outputs:
      models_changed: ${{ steps.check.outputs.models_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        name: Check if latest push touched models/**
        run: |
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          # If the event is "opened" there may be no "before" (all zeros). Fall back to PR base.
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ] || [ -z "$BEFORE" ]; then
            BEFORE="${{ github.event.pull_request.base.sha }}"
          fi

          echo "Diff range: $BEFORE..$AFTER"
          changed=$(git diff --name-only "$BEFORE" "$AFTER" -- models || true)

          if [ -n "$changed" ]; then
            echo "models_changed=true"  >> "$GITHUB_OUTPUT"
            echo "Changed files under models/:"
            echo "$changed"
          else
            echo "models_changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes under models/ in the latest push."
          fi

  detect-breaking-changes:
    needs: gate-latest-push
    runs-on: ubuntu-latest
    outputs:
      breaking_changes_found: ${{ steps.detect.outputs.breaking_changes_found }}
      added_models: ${{ steps.added-models.outputs.added_models_list }}
      added_properties_list: ${{ steps.added-properties.outputs.added_properties_list }}
      breaking_changes_list: ${{ steps.detect.outputs.breaking_changes_list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch main branch
        run: git fetch origin main

    
      - name: Check for deleted models and fail if any are found
        run: |
          echo "Checking for deleted models..."
          deleted_models=$(git diff --name-status origin/main -- models | grep '^D' || true)
    
          if [ -z "$deleted_models" ]; then
            deleted_count=0
          else
            deleted_count=$(echo "$deleted_models" | wc -l)
          fi

          if [ "$deleted_count" -gt 0 ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were deleted:"
            echo "$deleted_models" | while read -r status file; do
              echo "- $(basename "$file" .cs)"
            done
            exit 1
          else
            echo "No models were deleted."
          fi

      - name: Check for renamed models and fail if any are found
        run: |
          echo "Checking for renamed models..."
          renamed_models=$(git diff --name-status origin/main -- models | grep '^R' || true)
    
          if [ -z "$renamed_models" ]; then
            renamed_count=0
          else
            renamed_count=$(echo "$renamed_models" | wc -l)
          fi

          while read -r status oldfile newfile; do
            if [[ "$status" == R* ]]; then
              oldname=$(basename "$oldfile" .cs)
              newname=$(basename "$newfile" .cs)

              if [ "$oldname" != "$newname" ]; then
                if [ -z "$renamed" ]; then
                  renamed="- $oldname → $newname"
                else
                  renamed="$renamed\n- $oldname → $newname"
                fi
              else
                if [ -z "$moved_only" ]; then
                  moved_only="- $oldname"
                else
                  moved_only="$moved_only\n- $oldname"
                fi
              fi
            fi
          done <<< "$renamed_models"

          if [ -n "$moved_only" ]; then
            echo "WARNING: The following models were moved but not renamed:"
            echo -e "$moved_only"
          fi

          if [ -n "$renamed" ]; then
            echo "BREAKING CHANGE: Please review the changes. The following models were renamed:"
            echo -e "$renamed"
            exit 1
          else
            echo "No models were renamed."
          fi
        
      - name: Check for modified models and check the added properties. Fail if not nullable or have default value
        id: added-properties
        run: |
          echo "Checking for modified models and added properties..."

          modified_models=$(git diff --name-only --diff-filter=M origin/main -- models | grep -E '\.cs$' || true)

          breaking_properties=""
          non_breaking_properties=""

          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              # Get all added public properties
              all_added_properties=$(git diff origin/main -- "$model" \
                | grep '^\+' \
                | grep -v '^\+\s*//' \
                | grep -v '^\+\s*$' \
                | grep -E 'public\s+[^;{]+{[^}]*}' || true)

              if [ -n "$all_added_properties" ]; then
                # Filter those NOT nullable and NOT having default value
                breaking_props=$(echo "$all_added_properties" | grep -vE '\?\s*\w*\s*{|=\s*[^;]+;' || true)

                # Those that are nullable or have default value (non-breaking)
                non_breaking_props=$(echo "$all_added_properties" | grep -E '\?\s*\w*\s*{|=\s*[^;]+;' || true)

                if [ -n "$breaking_props" ]; then
                  breaking_properties+="\nIn $model:\n$breaking_props\n"
                fi
                if [ -n "$non_breaking_props" ]; then
                  props=$(echo "$non_breaking_props" | sed -E 's/.*public[[:space:]]+[^ ]+[[:space:]]+([^ ]+)[[:space:]]*\{.*/\1/' | tr '\n' ',' | sed 's/,$//')
                  model_name=$(basename "$model" .cs)
                  non_breaking_properties+="$model_name:$props;"
                fi
              fi
            done

            if [ -n "$non_breaking_properties" ]; then
              echo -e "The following added properties are nullable or have default values (non-breaking):"
              echo -e "$non_breaking_properties"

              echo "added_properties_list=${non_breaking_properties%;}" >> $GITHUB_OUTPUT
            else
              echo "No nullable or default value added properties found."
            fi

            if [ -n "$breaking_properties" ]; then
              echo -e "BREAKING CHANGE: The following properties were added without being nullable or having a default value:"
              echo -e "$breaking_properties"
              exit 1
            else
              echo "No added properties without nullable/default value found."
            fi
          else
            echo "No modified models found."
          fi

      - name: Detect potential breaking changes in modified models with modified properties
        id: detect
        run: |
          echo "Checking for deleted or modified properties in the models..."
          modified_models=$(git diff --name-only origin/main -- models | grep -E '\.cs$' || true)

          declare -A breaking_changes
          breaking_changes_found=false

          if [ -n "$modified_models" ]; then
            for model in $modified_models; do
              prop_lines=$(git diff origin/main -- "$model" | grep '^-' | grep -v '^---' | grep -v '^-\s*//' | grep -v '^\s*$' | grep -E '^\s*-\s*public .* { get; set; }' || true)

              echo "$prop_lines" 

              if [ -n "$prop_lines" ]; then
                model_name=$(basename "$model")
                # Extract property names from those lines
                props=()
                while IFS= read -r line; do
                  # line looks like: "-    public string PropertyName { get; set; }"
                  # Extract the property name using regex
                  # Remove leading "- ", then capture the word after "public <type>"
                  prop_name=$(echo "$line" | sed -E 's/^- *public [^ ]+ ([^ ]+) .*$/\1/')
                  props+=("$prop_name")
                done <<< "$prop_lines"

                # Save in associative array: join props by comma or newline
                breaking_changes["$model_name"]="${props[*]}"
                breaking_changes_found=true
              fi
            done
          fi

          if [ "$breaking_changes_found" = true ]; then
            echo "BREAKING CHANGE: The following models have modified or deleted properties:"
            for model in "${!breaking_changes[@]}"; do
              echo "$model:"
              for prop in ${breaking_changes[$model]}; do
                echo "  - $prop"
              done
            done
          else
            echo "No models have modified or deleted properties."
          fi

          breaking_list=""
          for model in "${!breaking_changes[@]}"; do
            props_csv=$(echo "${breaking_changes[$model]}" | tr ' ' ',')
            breaking_list+="${model}:${props_csv};"
          done

          echo "breaking_changes_found=$breaking_changes_found" >> $GITHUB_OUTPUT
          echo "breaking_changes_list=$breaking_list" >> $GITHUB_OUTPUT

  
      - name: Gather all added models and added properties on modified models and save it on a list
        id: added-models
        run: |
          echo "Gathering added models and properties..."

          added_models=$(git diff --name-only --diff-filter=A origin/main -- models | grep -E '\.cs$' || true)

          echo "Added models:"
          if [ -n "$added_models" ]; then
            echo "$added_models"
          else
            echo "No new models added."
          fi

          # Export outputs
          echo "added_models_list=$added_models" >> $GITHUB_OUTPUT

  potential-breaking-changes-found-bypass-approval:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'true' }}
    environment:
      name: dev
    outputs:
      approval_user: ${{ steps.get_approval_info.outputs.approval_user }}
      approval_user_fullname: ${{ steps.get_approval_info.outputs.approval_user_fullname }}
      approval_state: ${{ steps.get_approval_info.outputs.approval_state }}
      approval_date: ${{ steps.get_approval_info.outputs.approval_date }}
    steps:
      - name: Breaking changes found in the models. Please review the changes before continuing.
        run: echo "Manual approval received, continuing workflow."

      - name: Get latest deployment ID
        id: get_deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          owner=$(echo "$REPO" | cut -d/ -f1)
          repo=$(echo "$REPO" | cut -d/ -f2)

          deployments_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/deployments?environment=dev")

          deployment_id=$(echo "$deployments_json" | jq '.[0].id')

          if [ "$deployment_id" == "null" ] || [ -z "$deployment_id" ]; then
            echo "No deployment found for environment 'dev'."
            exit 1
          fi

          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT

      - name: Get deployment approval info
        id: get_approval_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          deployment_id=${{ steps.get_deployment.outputs.deployment_id }}
          owner=$(echo "$REPO" | cut -d/ -f1)
          repo=$(echo "$REPO" | cut -d/ -f2)

          statuses_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/deployments/$deployment_id/statuses")

          latest_status=$(echo "$statuses_json" | jq '.[0]')
          state=$(echo "$latest_status" | jq -r '.state')
          approver_login=$(echo "$latest_status" | jq -r '.creator.login')
          approval_date=$(echo "$latest_status" | jq -r '.created_at' | cut -d'T' -f1)

          full_name=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/users/$approver_login" | jq -r '.name')

          if [ -z "$full_name" ] || [ "$full_name" == "null" ]; then
            full_name="$approver_login"
          fi

          echo "approval_state=$state" >> $GITHUB_OUTPUT
          echo "approval_user=$approver_login" >> $GITHUB_OUTPUT
          echo "approval_user_fullname=$full_name" >> $GITHUB_OUTPUT
          echo "approval_date=$approval_date" >> $GITHUB_OUTPUT

  generate-changelog-no-breaking-changes:
    needs: detect-breaking-changes
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-breaking-changes.outputs.breaking_changes_found == 'false' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog document with added model properties
        env:
          ADDED_MODELS: ${{ needs.detect-breaking-changes.outputs.added_models }}
          ADDED_PROPERTIES_LIST: ${{ needs.detect-breaking-changes.outputs.added_properties_list }}
        run: |
          echo "Generating changelog document with added model properties..."
          echo "Added Models: $ADDED_MODELS"
          echo "Added Properties List: $ADDED_PROPERTIES_LIST"

          added_models_count=$(echo "$ADDED_MODELS" | grep -cve '^\s*$' || echo 0)
          modified_models_count=0
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            modified_models_count=$(echo "$ADDED_PROPERTIES_LIST" | tr ';' '\n' | grep -cve '^\s*$' || echo 0)
          fi

          echo "## Model Changes Changelog (No Breaking Changes)" > changelog.md
          echo "" >> changelog.md

          echo "### Summary" >> changelog.md
          echo "- Models Added: $added_models_count" >> changelog.md
          echo "- Models Modified (Added Properties): $modified_models_count" >> changelog.md
          echo "" >> changelog.md

          echo "### ➕ Added Models with Properties:" >> changelog.md
          if [ -n "$ADDED_MODELS" ]; then
            while read -r model_path; do
              model_name=$(basename "$model_path" .cs)
              echo "- $model_name" >> changelog.md

              props=$(grep -E 'public\s+[^;{]+{[^}]*}' "$model_path" | sed -E 's/.*public[[:space:]]+[^ ]+[[:space:]]+([^ ]+)[[:space:]]*\{.*/  - \1/')
              if [ -n "$props" ]; then
                echo "$props" >> changelog.md
              else
                echo "  - (No properties found)" >> changelog.md
              fi
            done <<< "$ADDED_MODELS"
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ➕ Added Properties in Modified Models:" >> changelog.md
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            IFS=';' read -ra models <<< "$ADDED_PROPERTIES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              echo "- $model" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### 🧑 Changed By:" >> changelog.md
          echo "- ${{ github.actor }}" >> changelog.md

      - name: Post changelog as PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'changelog.md';

            if (fs.existsSync(path)) {
              const changelog = fs.readFileSync(path, 'utf8');
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `### 📝 Models Changelog\n\n${changelog}`
              });
            } else {
              core.warning('changelog.md not found, skipping PR comment.');
            }

  generate-changelog-with-potential-breaking-changes:
    needs: [detect-breaking-changes, potential-breaking-changes-found-bypass-approval]
    runs-on: ubuntu-latest
    if: ${{ needs.potential-breaking-changes-found-bypass-approval.result == 'success' }}
    steps:
      - name: Post PR comment confirming approval of breaking change
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.warning("Not running in a pull request context. Skipping comment.");
              return;
            }

            const approver = `${{ needs.potential-breaking-changes-found-bypass-approval.outputs.approval_user_fullname }}`;
            const date = `${{ needs.potential-breaking-changes-found-bypass-approval.outputs.approval_date }}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `✅ **Breaking Change Approved**\n\n` +
                    `This breaking change was approved by **${approver}** on **${date}**.\n\n`
            });

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog document with breaking change details and added model properties
        env:
          BREAKING_CHANGES_LIST: ${{ needs.detect-breaking-changes.outputs.breaking_changes_list }}
          ADDED_MODELS: ${{ needs.detect-breaking-changes.outputs.added_models }}
          ADDED_PROPERTIES_LIST: ${{ needs.detect-breaking-changes.outputs.added_properties_list }}
          APPROVAL_STATE: ${{ needs.potential-breaking-changes-found-bypass-approval.outputs.approval_state }}
        run: |
          added_models_count=$(echo "$ADDED_MODELS" | grep -cve '^\s*$' || echo 0)
          modified_models_count=0
          breaking_models_count=0

          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            modified_models_count=$(echo "$ADDED_PROPERTIES_LIST" | awk -F';' '{print NF-1}')
          fi

          if [ -n "$BREAKING_CHANGES_LIST" ]; then
            breaking_models_count=$(echo "$BREAKING_CHANGES_LIST" | awk -F';' '{print NF-1}')
          fi

          echo "## Model Changes Changelog (Breaking Changes Approved)" > changelog.md
          echo "" >> changelog.md

          echo "### Summary" >> changelog.md
          echo "- Models Added: $added_models_count" >> changelog.md
          echo "- Models Modified (Added Properties): $modified_models_count" >> changelog.md
          echo "- Models with Breaking Changes: $breaking_models_count" >> changelog.md
          echo "" >> changelog.md

          echo "### ➕ Added Models with Properties:" >> changelog.md
          if [ -n "$ADDED_MODELS" ]; then
            while read -r model_path; do
              model_name=$(basename "$model_path" .cs)
              echo "- $model_name" >> changelog.md

              props=$(grep -E 'public\s+[^;{]+{[^}]*}' "$model_path" | sed -E 's/.*public[[:space:]]+[^ ]+[[:space:]]+([^ ]+)[[:space:]]*\{.*/  - \1/')
              if [ -n "$props" ]; then
                echo "$props" >> changelog.md
              else
                echo "  - (No properties found)" >> changelog.md
              fi
            done <<< "$ADDED_MODELS"
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ➕ Added Properties in Modified Models:" >> changelog.md
          if [ -n "$ADDED_PROPERTIES_LIST" ]; then
            IFS=';' read -ra models <<< "$ADDED_PROPERTIES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              echo "- $model" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ⚠️ Breaking Changes Detected:" >> changelog.md
          if [ -n "$BREAKING_CHANGES_LIST" ]; then
            IFS=';' read -ra models <<< "$BREAKING_CHANGES_LIST"
            for entry in "${models[@]}"; do
              model="${entry%%:*}"
              props="${entry#*:}"
              model_name=$(basename "$model" .cs)
              echo "- $model_name" >> changelog.md
              IFS=',' read -ra prop_array <<< "$props"
              for prop in "${prop_array[@]}"; do
                echo "  - $prop" >> changelog.md
              done
            done
          else
            echo "- None detected." >> changelog.md
          fi

          echo "" >> changelog.md
          echo "### ✅ Approved By:" >> changelog.md
          echo "- ${{ github.actor }}" >> changelog.md

          echo "" >> changelog.md
          echo "### ✅ Deployment Approved By:" >> changelog.md
          echo "- Name: ${{ needs.potential-breaking-changes-found-bypass-approval.outputs.approval_user_fullname }}" >> changelog.md
          echo "- Status: ${{ needs.potential-breaking-changes-found-bypass-approval.outputs.approval_state }}" >> changelog.md


      - name: Post changelog as PR comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'changelog.md';

            if (fs.existsSync(path)) {
              const changelog = fs.readFileSync(path, 'utf8');
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `### 📝 Models Changelog\n\n${changelog}`
              });
            } else {
              core.warning('changelog.md not found, skipping PR comment.');
            }
        
      - name: Upload changelog as artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: ./changelog.md

  commit-md:
      needs: generate-changelog-with-potential-breaking-changes
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Download changelog artifact
          uses: actions/download-artifact@v4
          with:
            name: changelog
            path: ./docs # put it in the desired folder path

        - name: Commit and push changelog
          run: |
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            git add docs/changelog.md
            git commit -m "Add changelog"
            git push origin HEAD:${{ github.head_ref }}

        - name: Post follow-up PR comment about changelog commit
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const pr = context.payload.pull_request;

              if (!pr) {
                core.warning("Not running in a pull request context. Skipping comment.");
                return;
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `📝 **Changelog has been committed.**\n\nPlease update the **Notes** section of this PR to provide more context about the breaking changes, reasoning, or migration guidance.`
              });

